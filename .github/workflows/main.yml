name: EC2 auto deploy

on:
  pull_request:
    branches: [ master ]
    types: [ closed ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      # IP取得ライブラリをインストール
      - name: Public IP Install
        id: ip
        run: |
          PUBLIC_IP=$(curl -s https://ifconfig.me)
          echo "ipv4=$PUBLIC_IP" >> $GITHUB_OUTPUT

      # BranchをCheckout
      - name: Checkout
        uses: actions/checkout@v2

      # AWS CLIをインストールする
      - name: AWS CLI install
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # AWS CLIにキーを設定をする
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # SSHエージェントをセットアップし、秘密鍵を追加する
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      # セキュリティグループを更新
      - name: Authorize Security Group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          echo "Waiting for security group rule to apply..."
          sleep 5

      # SSH接続とGit操作を分離
      - name: SSH and Git Operations
        run: |
          # リモートでgit clone/pullを実行
          # ssh-keyscanはssh -Aで自動的に解決されるか、ssh -oStrictHostKeyChecking=noでスキップ
          ssh -oStrictHostKeyChecking=no ${{ secrets.A_USER_NAME }}@${{ secrets.HOST_NAME }} "
            # ディレクトリの存在を確認し、クローンまたはプルを実行
            if [ ! -d /home/${{ secrets.A_USER_NAME }}/test/.git ]; then
              git clone --depth 1 git@github.com:sui-guest-ix/test-sui.git /home/${{ secrets.A_USER_NAME }}/test;
            else
              cd /home/${{ secrets.A_USER_NAME }}/test && git fetch --prune && git checkout master && git pull origin master;
            fi
          "

      # セキュリティグループを閉じる
      - name: Revoke Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
